// Don't forget to tell Prisma about your edits to this file using
// `bunx --bun --smol prisma migrate dev` or `bunx --bun --smol prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate
// Additional Resources
// https://prisma-erd.simonknott.de/
// https://prismaliser.app/

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  firstName  String
  middleName String?
  lastName   String
  username   String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  roles      String    @default("user")
  password   Password?
  notes      Note[]
  projects   Project[]
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
}

model Project {
  id            String        @id @default(cuid())
  title         String
  progress      Int           @default(0)
  status        String
  description   String?
  documentOwner String
  documentId    Int?
  dateArchived  DateTime?
  dateDeleted   DateTime?
  dateStarting  DateTime?
  dateEnding    DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  boards        ProjectTask[]
  user          User          @relation(fields: [documentOwner], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ProjectTask {
  id          String   @id @default(cuid())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDone      Boolean  @default(false)
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId   String
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Post {
//   id          String       @id @default(cuid())
//   title     String
//   content   String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   viewCount Int      @default(0)
//   published Boolean @default(false)
//   author    User?   @relation(fields: [authorId], references: [id])
//   authorId  String?
// }
